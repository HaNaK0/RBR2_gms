<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bob_left</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>X = 0;
Y = 1;

moveLockL = false
moveLockR = false

tempPosX = x
tempPosY = y

deltaPosX = 0
deltaPosY = 0

enum timers {
    attackR,
    attackU,
    attackL,
    attackD,
    comboSpace,
    main,
    rigthAD,
    upAD,
    leftAD,
    downAD
}


enum wall {
    NO,
    LEFT,
    RIGHT
}

nrOfTimers = 9
/*
[0] attack right
[1] attack up
[2] attack left
[3] attack down
[4] combo space
[5] main
[6] attack duration
[7] attack hold
[8] short jump
*/
for (i = 0; i  &lt; nrOfTimers; i++)
{
    cooldownTimers[i] = 0
}

//using the dir enums
for (i = 0; i  &lt; 5; i++)
{
    hold[i] = 5
}

//lock until landed or done a #walljump
for (i = 0; i &lt; 5; i++)
{
    swordLock[i] = false
}

//time you get from an enemy
enemyTime = 5

// #attack
attack = no_direction
//follow up attack
followUp = no_direction
//follow up active
comboing = false
//main cooldown
cooldownMain = 1;
//attack duartion
attackDuration =0.1
attackHold = 0.5


//#speed when moving sideways
mySpeedSlowed = 3;
mySpeedMax = 6;
mySpeed = mySpeedMax;
//sped currently moving veritcaly
hSpeed = 0;
// the speed your #jump starts at
jumpForce = -8;
weakJumpF = -5;
shortJumpGrace = 6; //steps
// the retardation of bob  horizontaly
drag = 0.8
dragInAir = 0.1
//the delay before bob releases from the wall in seconds
releaseDelay = 0.3

//walk accelleration
accelleration = 1
accInAir = 0.5

//the global #gravity aceleration
grav = 0.3;
// current fallspeed
fallSpeed = 0;
// maximum fallspeed
maxFallsp = 10;
fallLimit = maxFallsp;
//speed when bob glides down the wall
wallGlide = 2

isFalling = false;
closeToWall = wall.NO

//setting timers 
relDelTimer = -1

//force using to jump from wall
wallJump = 7

wallRelDel = false

//#lunge speed
lungeSpeed = 8

// keeping track oif colliding with monster
monsterCol = false

//time lost per step from standing in monster
timeLoss = 0.3 //seconds

bobState = state_idle_1

//animation variables

//animation speed
animSp = 10 // fps

//current showing frame
currentFrame = 0

//animation timers
animUpdateTim = 0

//the sprite
mySprite = spr_bob_right

//last calculated delta time
ot = delta_time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>newFrame = false

if fps_real &gt; room_speed
{
    fpsCor = 1
}
else
{
    fpsCor = room_speed / fps_real
}

//setting up the variables to keep wher the new object will end up
var tempPosX = x
var tempPosY = y

//#goal collison
if distance_to_object(obj_goal) &lt; 32
{
    if collision_rectangle(x - 10, y - 11, x + 10, y - 11, obj_goal, false, true) != noone
    {
        instance_create(x,y, obj_loading)
    }
}

//close the game
if keyboard_check(vk_escape)
{
    game_end()
}

// fall check
//checks if bob is standing on a tile and sets isFalling to false if he is
if  collision_line(x - 10, y + 16, x + 10, y + 16, obj_tile, false, false) != noone
{
    isFalling = false
}
else
{
    isFalling = true
}


//wall check
//checks if bob is next to a wall
if collision_line(x - 11, y + 11, x - 11, y - 12, obj_tile, false, false) &amp;&amp; keyboard_check(ord('A'))
{
    closeToWall = wall.LEFT
    if swordLock[0]
    {
        for(var i = 0; i &lt; 5; i ++)
        {
            swordLock[i] = false
        }
    }
}
else if collision_line(x + 11, y + 11, x + 11, y - 12, obj_tile, false, false) &amp;&amp; keyboard_check(ord('D'))
{
    closeToWall = wall.RIGHT
    if swordLock[0]
    {
        for(var i = 0; i &lt; 5; i ++)
        {
            swordLock[i] = false
        }
    }
}
else if collision_line(x + 11, y + 11, x + 11, y - 12, obj_tile, false, false) == noone
{
    closeToWall = wall.NO
}

//wall grab
if closeToWall &amp;&amp; (( keyboard_check(ord('A')) || keyboard_check(ord('D')) ) ||  wallRelDel == true)
{   
    fallLimit = wallGlide
}
else
{
    fallLimit = maxFallsp
}

if (keyboard_check_released(ord('A')) || keyboard_check_released(ord('D')))
{
    wallRelDel = true
    relDelTimer = releaseDelay * fps
}

//timer update
if relDelTimer &gt;= 0
{
    relDelTimer -=1
}

if relDelTimer == 0
{
    wallRelDel = false
}

/*
#timers:
[0] attack right
[1] attack up
[2] attack left
[3] attack down
[4] combo-space
[5] main
[6] attack duartion
*/
for (i = 0; i  &lt; nrOfTimers; i++)
{
    if cooldownTimers[i] &gt;= 0
    {
        cooldownTimers[i] -= 1
    }
}

//if bob is falling then accellerate downwards
if isFalling == true
{
    fallSpeed += grav
    if fallSpeed &gt; fallLimit
    {
        fallSpeed = fallLimit;
        
    }    
}
else
{
    fallSpeed = 0
}

//#jump input
if keyboard_check_pressed(vk_space) == true &amp;&amp; isFalling == false
{
    cooldownTimers[8] = shortJumpGrace
}
else if keyboard_check_pressed(vk_space) &amp;&amp; closeToWall = wall.LEFT
{
    fallSpeed = jumpForce
    hSpeed = wallJump 
    if keyboard_check(ord('A'))
    {
        moveLockL = true
    }
}
else if keyboard_check_pressed(vk_space) &amp;&amp; closeToWall = wall.RIGHT
{
    fallSpeed = jumpForce
    hSpeed = -wallJump 
    if keyboard_check(ord('D'))
    {
        moveLockR = true
    }
}

if keyboard_check_released(vk_space) &amp;&amp; cooldownTimers[8] &gt; 0
{
    fallSpeed = weakJumpF
    cooldownTimers[8] = -1
}

if cooldownTimers[8] == 0
{
    fallSpeed = jumpForce
}

// #lunge 
if currentFrame == 26 
{
    switch attack
    {
    case right:
        hSpeed = lungeSpeed
        break
    case up:
        fallSpeed = -lungeSpeed / 2
        break
    case left:
        hSpeed = -lungeSpeed
        break
    case down:
        fallSpeed = lungeSpeed
        break
    }
}

//input left and right
if keyboard_check(ord('A'))
{
    mySprite = spr_bob_left
    if hSpeed &gt; -mySpeed &amp;&amp; !moveLockL
    { 

        if isFalling
        {
            hSpeed -= accInAir
        }
        else
        {
            hSpeed -= accelleration
        }
    }
    else if moveLockL
    {
        if hSpeed &gt; 0
        {
            if isFalling
            {
                hSpeed -= dragInAir
            }
            else
            {
                hSpeed -= drag
            }
            
            if hSpeed &lt; 0
            {
                hSpeed = 0
            }
        }
        else if hSpeed &lt; 0
        {
            if isFalling
            {
                hSpeed += dragInAir
            }
            else
            {
                hSpeed += drag
            }
            
            if hSpeed &gt; 0
            {
                hSpeed = 0
            }
        }
    }
}
else if keyboard_check(ord('D'))
{
    mySprite = spr_bob_right
    if hSpeed &lt; mySpeed &amp;&amp; !moveLockR
    {
        if isFalling
        {
            hSpeed += accInAir
        }
        else
        {
            hSpeed += accelleration
        }
    }
    else if moveLockR
    {
        if hSpeed &gt; 0
        {
            if isFalling
            {
                hSpeed -= dragInAir
            }
            else
            {
                hSpeed -= drag
            }
            
            if hSpeed &lt; 0
            {
                hSpeed = 0
            }
        }
        else if hSpeed &lt; 0
        {
            if isFalling
            {
                hSpeed += dragInAir
            }
            else
            {
                hSpeed += drag
            }
            
            if hSpeed &gt; 0
            {
                hSpeed = 0
            }
        }
    }
}
else
{
    if hSpeed &gt; 0
    {
        if isFalling
        {
            hSpeed -= dragInAir
        }
        else
        {
            hSpeed -= drag
        }
        
        if hSpeed &lt; 0
        {
            hSpeed = 0
        }
    }
    else if hSpeed &lt; 0
    {
        if isFalling
        {
            hSpeed += dragInAir
        }
        else
        {
            hSpeed += drag
        }
        
        if hSpeed &gt; 0
        {
            hSpeed = 0
        }
    }
}

//move keys released
if keyboard_check_released(ord('A'))
{
    moveLockL = false
}

if keyboard_check_released(ord('D'))
{
    moveLockR = false
}
// bob #animation state runing or idle

if attack != no_direction
{
    bobState = state_attacking
}
else if hSpeed != 0
{
    bobState = state_running 
}
else
{
    bobState = state_idle_1
}

//end of attack
if currentFrame == 30
{
    attack = no_direction
    bobState = state_idle_1
}

//#animation
animUpdateTim += 1
if animUpdateTim &gt;= fps / animSp
{
    animUpdateTim = 0
    newFrame = true;
    switch bobState
    {
    case state_running:
        currentFrame += 1
        if currentFrame &gt; 12 || currentFrame &lt; 7
        {
            currentFrame = 7
        }
        break
    case state_idle_1:
        currentFrame += 1
        if currentFrame &gt; 5 || currentFrame &lt; 3
        {
            currentFrame = 3
        }
        break
    case state_attacking:
        currentFrame += 1
        if currentFrame &lt; 26 || currentFrame &gt; 30
        {
            currentFrame = 26
        }
    }
}

if newFrame 
{
    if !isFalling
    {
        switch currentFrame
        {
        case 8:
        case 11:
        case 14:
            audio_play_sound(Step, 2, false)
            break;
        }
    }
switch currentFrame
       {
            case 26:
                audio_play_sound(Sword1, 2, false)
                break;
       }
}


//#attack
//attacking right
if keyboard_check_pressed(vk_right) &amp;&amp; cooldownTimers[timers.attackR] &lt;= 0 &amp;&amp; !swordLock[right]
{
    if attack == no_direction
    {
        mySprite = spr_bob_right
        attack = right
        swordLock[right] = true
        swordLock[0] = true
    }
}
//attacking upwards
else if keyboard_check_pressed(vk_up) &amp;&amp; cooldownTimers[timers.attackU] &lt;= 0 &amp;&amp; !swordLock[up] 
{
    if attack == no_direction
    {
        attack = up
        swordLock[up] = true
        swordLock[0] = true
    }
}
//attacking left
else if keyboard_check_pressed(vk_left) &amp;&amp; cooldownTimers[timers.attackL] &lt;= 0 &amp;&amp; !swordLock[left]
{
    if attack == no_direction
    {
        mySprite = spr_bob_left
        attack = left
        swordLock[left] = true
        swordLock[0] = true
    }
}
//attacking left
else if keyboard_check_pressed(vk_down) &amp;&amp; cooldownTimers[timers.attackD] &lt;= 0 &amp;&amp; isFalling &amp;&amp; !swordLock[down]
{
    if attack == no_direction
    {
        attack = down
        swordLock[down] = true
        swordLock[0] = true
    }
}

//attack collision
if currentFrame &gt; 26 &amp;&amp; currentFrame &lt;= 29
{
    if mySprite == spr_bob_left
        var hitEnemy = collision_rectangle(x - 33, y - 5, x - 8, y + 15, obj_enemy, false, true)
    else
        var hitEnemy = collision_rectangle(x + 33, y - 5, x + 8, y + 15, obj_enemy, false, true)
        
    
    if hitEnemy != noone
    {
        with hitEnemy
        {
            instance_destroy()
            audio_play_sound(Enemydeath2, 2, false)
        }
        addTime(enemyTime)
    }
}

if !isFalling &amp;&amp; swordLock[0]
{
    for(var i = 0; i &lt; 5; i ++)
    {
        swordLock[i] = false
    }
}

//collision
if collision_rectangle(x - 10, y - 11, x + 10, y + 11 , obj_enemy, true, true)
{
    mySpeed = mySpeedSlowed
    addTime(-timeLoss)
    monsterCol = true
    if hSpeed &gt; mySpeedSlowed
    {
        hSpeed = mySpeedSlowed
    }
    else if hSpeed &lt; -mySpeedSlowed
    {
        hSpeed = -mySpeedSlowed
    }
}
else
{
    mySpeed = mySpeedMax
    monsterCol = false
}

//gravity collision
if fallSpeed &gt;= 0
{
    var vCollision = collision_line(x - 10, y + 16 + fallSpeed * fpsCor, x + 10, y + 16 + fallSpeed * fpsCor, obj_tile, false, false);
    if vCollision == noone
    {
        tempPosY += fallSpeed * fpsCor;
    }
    else if vCollision.halfTile
    {
        switch vCollision.orientation
        {
            case 0: 
                tempPosY = vCollision.y - 1 *(x - vCollision.x) + 32
                break
        }
    }
    else
    {
        tempPosY = vCollision.y -16 
    }
}
else
{
    var vCollision = collision_line(x - 10, y - 16 + fallSpeed * fpsCor, x + 10, y - 16 + fallSpeed * fpsCor, obj_tile, false, false);
    if vCollision == noone
    {
        tempPosY += fallSpeed * fpsCor;
    }
    else
    {
        tempPosY = vCollision.y +16 +32
        fallSpeed = 0;
    }
}

// horizontal collision
if hSpeed &lt; 0
{   
    var vCollider = collision_line(x -10 + hSpeed * fpsCor, tempPosY - 15, x -10 + hSpeed *fpsCor, tempPosY + 15, obj_tile_full, false, false)
    if vCollider == noone
    {
        tempPosX += hSpeed * fpsCor
    }
    else
    {
        tempPosX = vCollider.x +32 +10
        hSpeed = 0
    }
}
else if hSpeed &gt; 0
{   
    var vCollider = collision_line(x +10 + hSpeed * fpsCor, tempPosY - 15, x +10 + hSpeed * fpsCor, tempPosY + 15, obj_tile_full, false, false);
    if vCollider == noone
    {
        tempPosX += hSpeed * fpsCor
    }
    else
    {
        tempPosX = vCollider.x - 11
        hSpeed = 0
    }
}

x = tempPosX 
y = tempPosY
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(mySprite, currentFrame, x,y)

//debug
//Only for bugtesting
if global.debug
{
    
    
    draw_rectangle(x - 10, y - 11, x + 10, y + 11, true)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
